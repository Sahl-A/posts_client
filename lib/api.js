"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Pickly Post Service
 * Post Service API Specs
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.VotesApi = exports.VotesApiFactory = exports.VotesApiFp = exports.VotesApiAxiosParamCreator = exports.PostsApi = exports.PostsApiFactory = exports.PostsApiFp = exports.PostsApiAxiosParamCreator = exports.MediaApi = exports.MediaApiFactory = exports.MediaApiFp = exports.MediaApiAxiosParamCreator = exports.SinglePostResponseTypeEnum = exports.PostCreationRequestTypeEnum = void 0;
const axios_1 = __importDefault(require("axios"));
// Some imports not used depending on template conditions
// @ts-ignore
const common_1 = require("./common");
// @ts-ignore
const base_1 = require("./base");
/**
    * @export
    * @enum {string}
    */
var PostCreationRequestTypeEnum;
(function (PostCreationRequestTypeEnum) {
    PostCreationRequestTypeEnum["TextPoll"] = "text poll";
    PostCreationRequestTypeEnum["ImagePoll"] = "image poll";
    PostCreationRequestTypeEnum["MiniSurvey"] = "mini survey";
})(PostCreationRequestTypeEnum = exports.PostCreationRequestTypeEnum || (exports.PostCreationRequestTypeEnum = {}));
/**
    * @export
    * @enum {string}
    */
var SinglePostResponseTypeEnum;
(function (SinglePostResponseTypeEnum) {
    SinglePostResponseTypeEnum["TextPoll"] = "text poll";
    SinglePostResponseTypeEnum["ImagePoll"] = "image poll";
    SinglePostResponseTypeEnum["MiniSurvey"] = "mini_survey";
})(SinglePostResponseTypeEnum = exports.SinglePostResponseTypeEnum || (exports.SinglePostResponseTypeEnum = {}));
/**
 * MediaApi - axios parameter creator
 * @export
 */
const MediaApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Add the media data related to a post
         * @param {any} file
         * @param {string} entityType
         * @param {string} entityId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadOneMedia: async (file, entityType, entityId, options = {}) => {
            // verify required parameter 'file' is not null or undefined
            common_1.assertParamExists('uploadOneMedia', 'file', file);
            // verify required parameter 'entityType' is not null or undefined
            common_1.assertParamExists('uploadOneMedia', 'entityType', entityType);
            // verify required parameter 'entityId' is not null or undefined
            common_1.assertParamExists('uploadOneMedia', 'entityId', entityId);
            const localVarPath = `/media`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();
            if (file !== undefined) {
                localVarFormParams.append('file', file);
            }
            if (entityType !== undefined) {
                localVarFormParams.append('entity_type', entityType);
            }
            if (entityId !== undefined) {
                localVarFormParams.append('entity_id', new Blob([JSON.stringify(entityId)], { type: "application/json", }));
            }
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = localVarFormParams;
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
exports.MediaApiAxiosParamCreator = MediaApiAxiosParamCreator;
/**
 * MediaApi - functional programming interface
 * @export
 */
const MediaApiFp = function (configuration) {
    const localVarAxiosParamCreator = exports.MediaApiAxiosParamCreator(configuration);
    return {
        /**
         *
         * @summary Add the media data related to a post
         * @param {any} file
         * @param {string} entityType
         * @param {string} entityId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async uploadOneMedia(file, entityType, entityId, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.uploadOneMedia(file, entityType, entityId, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
    };
};
exports.MediaApiFp = MediaApiFp;
/**
 * MediaApi - factory interface
 * @export
 */
const MediaApiFactory = function (configuration, basePath, axios) {
    const localVarFp = exports.MediaApiFp(configuration);
    return {
        /**
         *
         * @summary Add the media data related to a post
         * @param {any} file
         * @param {string} entityType
         * @param {string} entityId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadOneMedia(file, entityType, entityId, options) {
            return localVarFp.uploadOneMedia(file, entityType, entityId, options).then((request) => request(axios, basePath));
        },
    };
};
exports.MediaApiFactory = MediaApiFactory;
/**
 * MediaApi - object-oriented interface
 * @export
 * @class MediaApi
 * @extends {BaseAPI}
 */
class MediaApi extends base_1.BaseAPI {
    /**
     *
     * @summary Add the media data related to a post
     * @param {any} file
     * @param {string} entityType
     * @param {string} entityId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MediaApi
     */
    uploadOneMedia(file, entityType, entityId, options) {
        return exports.MediaApiFp(this.configuration).uploadOneMedia(file, entityType, entityId, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.MediaApi = MediaApi;
/**
 * PostsApi - axios parameter creator
 * @export
 */
const PostsApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary add option group to post
         * @param {string} postid id of post needed
         * @param {OptionsGroupCreation} optionsGroupCreation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOptionsGroup: async (postid, optionsGroupCreation, options = {}) => {
            // verify required parameter 'postid' is not null or undefined
            common_1.assertParamExists('createOptionsGroup', 'postid', postid);
            // verify required parameter 'optionsGroupCreation' is not null or undefined
            common_1.assertParamExists('createOptionsGroup', 'optionsGroupCreation', optionsGroupCreation);
            const localVarPath = `/posts/{postid}/groups`
                .replace(`{${"postid"}}`, encodeURIComponent(String(postid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(optionsGroupCreation, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Create a new post
         * @param {PostCreationRequest} postCreationRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPost: async (postCreationRequest, options = {}) => {
            // verify required parameter 'postCreationRequest' is not null or undefined
            common_1.assertParamExists('createPost', 'postCreationRequest', postCreationRequest);
            const localVarPath = `/posts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(postCreationRequest, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Delete one post
         * @param {string} postid id of post needed
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteOnePost: async (postid, options = {}) => {
            // verify required parameter 'postid' is not null or undefined
            common_1.assertParamExists('deleteOnePost', 'postid', postid);
            const localVarPath = `/posts/{postid}`
                .replace(`{${"postid"}}`, encodeURIComponent(String(postid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary patch post
         * @param {string} postid id of post needed
         * @param {PostFinishedFlagRequest} postFinishedFlagRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        flagPostAsFinished: async (postid, postFinishedFlagRequest, options = {}) => {
            // verify required parameter 'postid' is not null or undefined
            common_1.assertParamExists('flagPostAsFinished', 'postid', postid);
            // verify required parameter 'postFinishedFlagRequest' is not null or undefined
            common_1.assertParamExists('flagPostAsFinished', 'postFinishedFlagRequest', postFinishedFlagRequest);
            const localVarPath = `/posts/{postid}`
                .replace(`{${"postid"}}`, encodeURIComponent(String(postid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(postFinishedFlagRequest, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get single post
         * @param {string} postid id of post needed
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOnePost: async (postid, options = {}) => {
            // verify required parameter 'postid' is not null or undefined
            common_1.assertParamExists('getOnePost', 'postid', postid);
            const localVarPath = `/posts/{postid}`
                .replace(`{${"postid"}}`, encodeURIComponent(String(postid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get posts
         * @param {number} [offset] The number of items to skip before starting to collect the result set
         * @param {number} [limit] The numbers of items to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPosts: async (offset, limit, options = {}) => {
            const localVarPath = `/posts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
exports.PostsApiAxiosParamCreator = PostsApiAxiosParamCreator;
/**
 * PostsApi - functional programming interface
 * @export
 */
const PostsApiFp = function (configuration) {
    const localVarAxiosParamCreator = exports.PostsApiAxiosParamCreator(configuration);
    return {
        /**
         *
         * @summary add option group to post
         * @param {string} postid id of post needed
         * @param {OptionsGroupCreation} optionsGroupCreation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createOptionsGroup(postid, optionsGroupCreation, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createOptionsGroup(postid, optionsGroupCreation, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         *
         * @summary Create a new post
         * @param {PostCreationRequest} postCreationRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createPost(postCreationRequest, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createPost(postCreationRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         *
         * @summary Delete one post
         * @param {string} postid id of post needed
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteOnePost(postid, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteOnePost(postid, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         *
         * @summary patch post
         * @param {string} postid id of post needed
         * @param {PostFinishedFlagRequest} postFinishedFlagRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async flagPostAsFinished(postid, postFinishedFlagRequest, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.flagPostAsFinished(postid, postFinishedFlagRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         *
         * @summary Get single post
         * @param {string} postid id of post needed
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOnePost(postid, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOnePost(postid, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         *
         * @summary Get posts
         * @param {number} [offset] The number of items to skip before starting to collect the result set
         * @param {number} [limit] The numbers of items to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPosts(offset, limit, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPosts(offset, limit, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
    };
};
exports.PostsApiFp = PostsApiFp;
/**
 * PostsApi - factory interface
 * @export
 */
const PostsApiFactory = function (configuration, basePath, axios) {
    const localVarFp = exports.PostsApiFp(configuration);
    return {
        /**
         *
         * @summary add option group to post
         * @param {string} postid id of post needed
         * @param {OptionsGroupCreation} optionsGroupCreation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOptionsGroup(postid, optionsGroupCreation, options) {
            return localVarFp.createOptionsGroup(postid, optionsGroupCreation, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Create a new post
         * @param {PostCreationRequest} postCreationRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPost(postCreationRequest, options) {
            return localVarFp.createPost(postCreationRequest, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Delete one post
         * @param {string} postid id of post needed
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteOnePost(postid, options) {
            return localVarFp.deleteOnePost(postid, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary patch post
         * @param {string} postid id of post needed
         * @param {PostFinishedFlagRequest} postFinishedFlagRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        flagPostAsFinished(postid, postFinishedFlagRequest, options) {
            return localVarFp.flagPostAsFinished(postid, postFinishedFlagRequest, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get single post
         * @param {string} postid id of post needed
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOnePost(postid, options) {
            return localVarFp.getOnePost(postid, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get posts
         * @param {number} [offset] The number of items to skip before starting to collect the result set
         * @param {number} [limit] The numbers of items to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPosts(offset, limit, options) {
            return localVarFp.getPosts(offset, limit, options).then((request) => request(axios, basePath));
        },
    };
};
exports.PostsApiFactory = PostsApiFactory;
/**
 * PostsApi - object-oriented interface
 * @export
 * @class PostsApi
 * @extends {BaseAPI}
 */
class PostsApi extends base_1.BaseAPI {
    /**
     *
     * @summary add option group to post
     * @param {string} postid id of post needed
     * @param {OptionsGroupCreation} optionsGroupCreation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PostsApi
     */
    createOptionsGroup(postid, optionsGroupCreation, options) {
        return exports.PostsApiFp(this.configuration).createOptionsGroup(postid, optionsGroupCreation, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Create a new post
     * @param {PostCreationRequest} postCreationRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PostsApi
     */
    createPost(postCreationRequest, options) {
        return exports.PostsApiFp(this.configuration).createPost(postCreationRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Delete one post
     * @param {string} postid id of post needed
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PostsApi
     */
    deleteOnePost(postid, options) {
        return exports.PostsApiFp(this.configuration).deleteOnePost(postid, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary patch post
     * @param {string} postid id of post needed
     * @param {PostFinishedFlagRequest} postFinishedFlagRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PostsApi
     */
    flagPostAsFinished(postid, postFinishedFlagRequest, options) {
        return exports.PostsApiFp(this.configuration).flagPostAsFinished(postid, postFinishedFlagRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get single post
     * @param {string} postid id of post needed
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PostsApi
     */
    getOnePost(postid, options) {
        return exports.PostsApiFp(this.configuration).getOnePost(postid, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get posts
     * @param {number} [offset] The number of items to skip before starting to collect the result set
     * @param {number} [limit] The numbers of items to return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PostsApi
     */
    getPosts(offset, limit, options) {
        return exports.PostsApiFp(this.configuration).getPosts(offset, limit, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.PostsApi = PostsApi;
/**
 * VotesApi - axios parameter creator
 * @export
 */
const VotesApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Add vote
         * @param {string} optionid id of option
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addVote: async (optionid, options = {}) => {
            // verify required parameter 'optionid' is not null or undefined
            common_1.assertParamExists('addVote', 'optionid', optionid);
            const localVarPath = `/votes/{optionid}`
                .replace(`{${"optionid"}}`, encodeURIComponent(String(optionid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
exports.VotesApiAxiosParamCreator = VotesApiAxiosParamCreator;
/**
 * VotesApi - functional programming interface
 * @export
 */
const VotesApiFp = function (configuration) {
    const localVarAxiosParamCreator = exports.VotesApiAxiosParamCreator(configuration);
    return {
        /**
         *
         * @summary Add vote
         * @param {string} optionid id of option
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addVote(optionid, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addVote(optionid, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
    };
};
exports.VotesApiFp = VotesApiFp;
/**
 * VotesApi - factory interface
 * @export
 */
const VotesApiFactory = function (configuration, basePath, axios) {
    const localVarFp = exports.VotesApiFp(configuration);
    return {
        /**
         *
         * @summary Add vote
         * @param {string} optionid id of option
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addVote(optionid, options) {
            return localVarFp.addVote(optionid, options).then((request) => request(axios, basePath));
        },
    };
};
exports.VotesApiFactory = VotesApiFactory;
/**
 * VotesApi - object-oriented interface
 * @export
 * @class VotesApi
 * @extends {BaseAPI}
 */
class VotesApi extends base_1.BaseAPI {
    /**
     *
     * @summary Add vote
     * @param {string} optionid id of option
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VotesApi
     */
    addVote(optionid, options) {
        return exports.VotesApiFp(this.configuration).addVote(optionid, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.VotesApi = VotesApi;
//# sourceMappingURL=api.js.map